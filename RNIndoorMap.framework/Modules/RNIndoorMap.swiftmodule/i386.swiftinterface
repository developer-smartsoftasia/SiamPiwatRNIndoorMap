// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name RNIndoorMap
import Action
import CoreLocation
import Device
import Foundation
import Kingfisher
import Mappedin
@_exported import RNIndoorMap
import RxCocoa
import RxGesture
import RxSwift
import Swift
import Toast_Swift
import UIKit
open class RxTextFieldDelegateProxy : RxCocoa.DelegateProxy<UIKit.UITextField, UIKit.UITextFieldDelegate>, RxCocoa.DelegateProxyType, UIKit.UITextFieldDelegate {
  public static func currentDelegate(for object: UIKit.UITextField) -> UIKit.UITextFieldDelegate?
  public static func setCurrentDelegate(_ delegate: UIKit.UITextFieldDelegate?, to object: UIKit.UITextField)
  weak public var textField: UIKit.UITextField? {
    get
  }
  public init(textField: RNIndoorMap.RxTextFieldDelegateProxy.ParentObject)
  public static func registerKnownImplementations()
  @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  override public init<Proxy>(parentObject: RxCocoa.DelegateProxy<UIKit.UITextField, UIKit.UITextFieldDelegate>.ParentObject, delegateProxy: Proxy.Type) where Proxy : RxCocoa.DelegateProxy<UIKit.UITextField, UIKit.UITextFieldDelegate>, Proxy : RxCocoa.DelegateProxyType, Proxy.Delegate == UIKit.UITextFieldDelegate, Proxy.ParentObject == UIKit.UITextField
}
extension UITextField {
  public func createRxDelegateProxy() -> RNIndoorMap.RxTextFieldDelegateProxy
}
extension Reactive where Base : UIKit.UITextField {
  public var delegate: RxCocoa.DelegateProxy<UIKit.UITextField, UIKit.UITextFieldDelegate> {
    get
  }
  public var shouldReturn: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
  public var shouldClear: RxCocoa.ControlEvent<Swift.Void> {
    get
  }
}
extension UIButton {
  @objc override dynamic open func awakeFromNib()
}
extension UIImageView {
  @objc override dynamic open func awakeFromNib()
}
@_hasMissingDesignatedInitializers @objc(SPWLabel) public class SPWLabelObjC : ObjectiveC.NSObject {
  @objc public var thai: Swift.String?
  @objc public var english: Swift.String?
  @objc public var chinese: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(SPWStore) public class SPWStoreObjC : ObjectiveC.NSObject {
  @objc public var id: Swift.String?
  @objc public var closeAt: [Swift.String]
  @objc public var openAt: [Swift.String]
  @objc public var lineIds: [Swift.String]
  @objc public var mallId: Swift.String?
  @objc public var images: [Foundation.URL]
  @objc public var floorId: Swift.String?
  @objc public var name: RNIndoorMap.SPWLabelObjC?
  @objc public var desc: RNIndoorMap.SPWLabelObjC?
  @objc public var imageThumbnail: Foundation.URL?
  @objc public var externalId: Swift.String?
  @objc public var openDay: [Swift.Bool]
  @objc public var tels: [Swift.String]
  @objc public var urls: [Foundation.URL]
  @objc public func nameLocalized() -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
public typealias SPWVenue = RNIndoorMap.Venue
@_hasMissingDesignatedInitializers public class Venue : Mappedin.Venue {
  public var tenants: [RNIndoorMap.Tenant]
  public var amenities: [RNIndoorMap.Amenity]
  @objc deinit
}
public typealias SPWTenant = RNIndoorMap.Tenant
public typealias SPWAmenity = RNIndoorMap.Amenity
@_hasMissingDesignatedInitializers public class Tenant : Mappedin.Location {
  public var id: Swift.String
  public var externalId: Swift.String
  public var description: Swift.String
  public var logo: Mappedin.ImageSet?
  public var phone: Mappedin.PhoneNumber?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Amenity : Mappedin.Location {
  @objc deinit
}
public struct SPWAISFloor : Swift.Equatable {
  public var id: Swift.Int?
  public var buildingId: Swift.Int?
  public var projectId: Swift.Int?
  public var level: Swift.Int
  public static func == (lhs: RNIndoorMap.SPWAISFloor, rhs: RNIndoorMap.SPWAISFloor) -> Swift.Bool
}
extension SPWAISFloor : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct SPWFloor : Swift.Equatable {
  public var id: Swift.Int?
  public var index: Swift.Int
  public var name: Swift.String
  public var shortName: Swift.String
  public var aisFloor: RNIndoorMap.SPWAISFloor?
  public var mappedInFloor: Mappedin.Map?
  public static func == (lhs: RNIndoorMap.SPWFloor, rhs: RNIndoorMap.SPWFloor) -> Swift.Bool
}
public struct SPWCategory {
  public var name: Swift.String?
  public var mappedInCategory: Mappedin.Category?
}
public struct SPWLabel {
  public var th: Swift.String?
  public var en: Swift.String?
  public var cn: Swift.String?
}
extension SPWLabel : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SPWStore {
  public var id: Swift.String?
  public var closeAt: [Swift.String]
  public var openAt: [Swift.String]
  public var lineIds: [Swift.String]
  public var mallId: Swift.String?
  public var images: [Foundation.URL]
  public var floorId: Swift.String?
  public var name: RNIndoorMap.SPWLabel?
  public var description: RNIndoorMap.SPWLabel?
  public var imageThumbnail: Foundation.URL?
  public var externalId: Swift.String?
  public var openDay: [Swift.Bool]
  public var tels: [Swift.String]
  public var urls: [Foundation.URL]
  public var mappedInLocation: Mappedin.Location?
  public var categories: [RNIndoorMap.SPWCategory]
  public mutating func updateTenant(_ tenant: RNIndoorMap.Tenant)
  public func nameLocalized() -> Swift.String?
  public func json() -> [Swift.String : Any]
}
extension SPWStore : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SPWDepartmentStore {
  public var name: Swift.String
  public var slug: Swift.String
  public var floors: [RNIndoorMap.SPWFloor]
  public var stores: [RNIndoorMap.SPWStore]
  public var mappedInVenueListing: Mappedin.VenueListing?
  public var mappedInVenue: RNIndoorMap.Venue?
  public var index: Swift.Int
}
public enum SPWApplicationError : Swift.Error, Foundation.LocalizedError {
  case network(statusCode: Swift.Int, description: Swift.String)
  case applicationInternal(applicationError: RNIndoorMap.ApplicationInternalError)
  case custom(errorDescription: Swift.String)
  public var errorDescription: Swift.String {
    get
  }
  public var objcError: Foundation.NSError {
    get
  }
}
public enum ApplicationInternalError : Swift.Error, Foundation.LocalizedError {
  case noVenueMatched
  public var errorDescription: Swift.String {
    get
  }
  public static func == (a: RNIndoorMap.ApplicationInternalError, b: RNIndoorMap.ApplicationInternalError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SPWAISLocation {
  public var isIndoor: Swift.Bool
  public var latitude: Swift.String?
  public var longitude: Swift.String?
  public var builId: Swift.String?
  public var buildName: Swift.String?
  public var floorId: Swift.String?
  public var floorNumber: Swift.String?
  public init(isIndoor: Swift.Bool, latitude: Swift.String, longitude: Swift.String, builId: Swift.String, buildName: Swift.String, floorId: Swift.String, floorNumber: Swift.String)
}
extension SPWAISLocation : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc(SPWApplication) public enum SPWApplicationSlugObjC : ObjectiveC.NSInteger {
  case oneSiam = 1
  case iconSiam = 2
  public typealias RawValue = ObjectiveC.NSInteger
  public init?(rawValue: ObjectiveC.NSInteger)
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc(SPWLanguage) public enum SPWLanguageObjC : ObjectiveC.NSInteger {
  @objc(SPWLanguageThai) case th
  @objc(SPWLanguageEnglish) case en
  @objc(SPWLanguageChinese) case cn
  public typealias RawValue = ObjectiveC.NSInteger
  public init?(rawValue: ObjectiveC.NSInteger)
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@_inheritsConvenienceInitializers @objc(SPWIndoorMapManager) public class SPWIndoorMapSDKManagerObjC : ObjectiveC.NSObject {
  @objc(sharedInstance) public static let shared: RNIndoorMap.SPWIndoorMapSDKManagerObjC
  @objc public var language: RNIndoorMap.SPWLanguageObjC
  @objc public var viewController: UIKit.UIViewController {
    @objc get
  }
  @objc public static func initialSDK(slug: RNIndoorMap.SPWApplicationSlugObjC, shops: [[Swift.String : Any]], language: RNIndoorMap.SPWLanguageObjC, appDelegate: UIKit.UIApplicationDelegate.Type, isDebug: Swift.Bool, simulateNavigation: Swift.Bool)
  @objc public static func getVenues(completionBlock: @escaping (() -> Swift.Void), failureBlock: @escaping ((Foundation.NSError) -> Swift.Void))
  @objc public static func setFloor(_ floorNumber: Swift.Int)
  @objc public static func resetOrginAndDestination()
  @objc public static func setStores(_ shops: [[Swift.String : Any]])
  @objc public static func getStoreByID(_ id: Swift.String) -> [Swift.String : Any]?
  @objc public static func getAllStores() -> [[Swift.String : Any]]
  @objc public static func setOrigin(_ storeId: Swift.String)
  @objc public static func setDestination(_ storeId: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public enum SPWDepartmentSlug : Swift.String, Swift.CaseIterable {
  case siamCenter
  case siamDiscovery
  case siamParagon
  case iconSiam
  case siamCarPark
  public var index: Swift.Int {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [RNIndoorMap.SPWDepartmentSlug]
  public static var allCases: [RNIndoorMap.SPWDepartmentSlug] {
    get
  }
}
public enum SPWApplicationSlug : Swift.String, Swift.CaseIterable {
  case oneSiam
  case iconSiam
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [RNIndoorMap.SPWApplicationSlug]
  public static var allCases: [RNIndoorMap.SPWApplicationSlug] {
    get
  }
}
public enum SPWLanguage : Swift.Int {
  case th
  case en
  case cn
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SPWIndoorMapSDKManager {
  public static let shared: RNIndoorMap.SPWIndoorMapSDKManager
  public var categories: [RNIndoorMap.SPWCategory]
  public var applicationSlug: RNIndoorMap.SPWApplicationSlug
  public var language: RNIndoorMap.SPWLanguage
  public var accessible: Swift.Bool
  public var viewController: UIKit.UIViewController {
    get
  }
  public func initialSDK(slug: RNIndoorMap.SPWApplicationSlug = .oneSiam, shops: [[Swift.String : Any]] = [], language: RNIndoorMap.SPWLanguage = .en, appDelegate: UIKit.UIApplicationDelegate.Type, isDebug: Swift.Bool = false, simulateNavigation: Swift.Bool = false)
  public func getVenues(completion: @escaping RNIndoorMap.SPWCompletion, failure: @escaping RNIndoorMap.SPWFailure)
  public func setDebugMode(isDebug: Swift.Bool)
  public func setSimulateNavigation(simulateNavigation: Swift.Bool)
  public func setCurrentPositionColor(color: UIKit.UIColor)
  public func setAISShops(_ shops: [[Swift.String : Any]])
  public func departmentStore() -> RNIndoorMap.SPWDepartmentStore?
  public func setDepartmentStore(departmentStore: RNIndoorMap.SPWDepartmentStore)
  public func getDepartmentStore(slug: RNIndoorMap.SPWDepartmentSlug) -> RNIndoorMap.SPWDepartmentStore?
  public func stores() -> [RNIndoorMap.SPWStore]
  public func setFloor(_ floor: RNIndoorMap.SPWFloor)
  public func floor(at floorNumber: Swift.Int) -> RNIndoorMap.SPWFloor?
  public func store(_ externalId: Swift.String) -> RNIndoorMap.SPWStore?
  public func getClosestStore(location: RNIndoorMap.SPWAISLocation) -> RNIndoorMap.SPWStore?
  public func setOrgin(_ orgin: RNIndoorMap.SPWStore)
  public func setDestination(_ destination: RNIndoorMap.SPWStore)
  public func setOrginAndDestination(orgin: RNIndoorMap.SPWStore, destination: RNIndoorMap.SPWStore)
  public func resetOrginAndDestination()
  public func setEnableDeviceLocation(isEnableDeviceLocation: Swift.Bool)
  public func updateUserCurrentPosition(_ location: CoreLocation.CLLocation)
  public func updateUserCurrentPosition(_ aislocation: RNIndoorMap.SPWAISLocation?)
  @objc deinit
}
public typealias SPWCompletion = () -> Swift.Void
public typealias SPWFailure = (RNIndoorMap.SPWApplicationError) -> Swift.Void
public typealias SPWGRadiusLatLonBuilding = (location: CoreLocation.CLLocation, radisMeter: Swift.Double)
extension RNIndoorMap.ApplicationInternalError : Swift.Equatable {}
extension RNIndoorMap.ApplicationInternalError : Swift.Hashable {}
extension RNIndoorMap.SPWApplicationSlugObjC : Swift.Equatable {}
extension RNIndoorMap.SPWApplicationSlugObjC : Swift.Hashable {}
extension RNIndoorMap.SPWApplicationSlugObjC : Swift.RawRepresentable {}
extension RNIndoorMap.SPWLanguageObjC : Swift.Equatable {}
extension RNIndoorMap.SPWLanguageObjC : Swift.Hashable {}
extension RNIndoorMap.SPWLanguageObjC : Swift.RawRepresentable {}
extension RNIndoorMap.SPWDepartmentSlug : Swift.Equatable {}
extension RNIndoorMap.SPWDepartmentSlug : Swift.Hashable {}
extension RNIndoorMap.SPWDepartmentSlug : Swift.RawRepresentable {}
extension RNIndoorMap.SPWApplicationSlug : Swift.Equatable {}
extension RNIndoorMap.SPWApplicationSlug : Swift.Hashable {}
extension RNIndoorMap.SPWApplicationSlug : Swift.RawRepresentable {}
extension RNIndoorMap.SPWLanguage : Swift.Equatable {}
extension RNIndoorMap.SPWLanguage : Swift.Hashable {}
extension RNIndoorMap.SPWLanguage : Swift.RawRepresentable {}
